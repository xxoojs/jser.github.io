!(function($){
	function iRotate($el, callback){
		this.render($el, callback);
	}

	iRotate.prototype = {
		constructor: iRotate,

		render: function($el, callback){
			var elRect = $el[0].getBoundingClientRect(),
				initY = elRect.bottom;

			$el.mousedown(function(downevent){
				var downX = downevent.pageX,
					downY = downevent.pageY;
				$(document).mousemove(function(moveevent){
					var moveX = moveevent.pageX,
						moveY = moveevent.pageY;

					var angle = -(moveY - initY);

					$el.css('transform', 'rotateZ(' + (angle > 55 ? 55 : (angle < -10 ? -10 : angle)) + 'deg)');
					callback && callback();

					$(document).mouseup(function(upevent){
						$(document).off('mousemove').off('mouseup');
					});
				});
			});
		}
	};

	!(function () {
        var old = $.fn.iRotate;
        $.fn.iRotate = function (callback) {
            return this.each(function () {
                var $this = $(this);

                new iRotate($this, callback);
            });
        }
        $.fn.iRotate.constructor = iRotate;
        $.fn.iRotate.defaults = {};
        $.fn.iRotate.noConflict = function () {
            $.fn.iRotate = old;
            return this;
        }
    })();
})(jQuery);

!(function($){
	function iDialog(json){
		this.create(json);
	}

	iDialog.prototype = {
		$el: '',

		tmpl: '',

		create: function(json){
			if(this.tmpl){
				this.$el = $(this.tmpl);
				that.evtBind();
				that.$el.appendTo($('body'));
			}else{
				var that = this;
				$.ajax({
					url: 'resource/tmpl/dialog.html',
					success: function(data){
						that.tmpl = data;
						var tmpl = data.replace('${url}', json.url)
											.replace('${title}', json.title)
												.replace('${icon}', json.icon)
													.replaceAll('${data}', json.data)
														.replace('${tip}', json.tip);
						that.$el = $(tmpl);
						that.evtBind();
						that.$el.appendTo($('body'));
					}
				});
			}
		},

		evtBind: function(){
			var that = this;
			this.$el.find('.close').click(function(){
				that.close();
			});

			this.$el.iDrag();
		},

		open: function(){

		},

		close: function(){
			this.$el.remove();
		}
	};

	!(function(){
		var old = $.iDialog;
		$.iDialog = function(json){
			return new iDialog(json);
		};
		$.iDialog.constructor = iDialog;
		$.iDialog.defaults = {};
		$.iDialog.noConfict = function(){
			$.iDialog = old;
			return this;
		}
	})();
})(jQuery);

!(function(){
	function iDrag($el){
		this.render($el);
	}

	iDrag.prototype = {
		constructor: iDrag,

		render: function($el){
			var active = false;
			$el.on('mousedown touchstart', function(downEvt){
				var downX = downEvt.pageX,
					downY = downEvt.pageY;

				active = true;

				var distanceX = downX - parseInt($el.css('left')),
					distanceY = downY - parseInt($el.css('top'));

					// console.log('down:');
					// console.log(downX + ':' + downY);
					// console.log($el.css('left') + ':' + $el.css('top'));

				$(document).on('mousemove touchmove', function(moveEvt){
					if(active){
						var moveX = moveEvt.pageX,
							moveY = moveEvt.pageY;

						var left = moveX - distanceX,
							top = moveY - distanceY,
							maxLeft = document.body.offsetWidth,
							maxTop = document.body.offsetHeight;
						
						// if(left <= 0){
						// 	left = 0;
						// }
						// if((left + parseInt($el.css('width'))) > maxLeft){
						// 	left = maxLeft - parseInt($el.css('width'));
						// }

						// if(top <= 0){
						// 	top = 0;
						// }
						// if((top + parseInt($el.css('height'))) > maxTop){
						// 	top = maxTop - parseInt($el.css('height'));
						// }

						$el.css('left', left + 'px');
						$el.css('top', top + 'px');
					}

					$(document).on('mouseup touchend', function(){
						// $(document).off('mousemove').off('mouseup');
						active = false;
					});
				});
			});
		}
	};

	!(function(){
		var old = $.fn.iDrag;
		$.fn.iDrag = function(){
			this.each(function(){
				new iDrag($(this));
			});
		}
		$.fn.iDrag.defaults = {};
		$.fn.iDrag.noConfict = function(){
			$.fn.iDrag = old;
			return this;
		}
	})();
})();

!(function(){
	function iGuide(){
		this.render();
	}

	iGuide.prototype = {
		constructor: iGuide,

		defaults: {
			step: 0
		},

		render: function(){
			var that = this;
			$.ajax({
				url: 'resource/tmpl/guide.html',
				success: function(data){
					that.$el = $(data);

					that.evtBind();
					that.$el.appendTo($('body'));
				}
			});
		},

		evtBind: function(){
			var that = this;
			this.$el.click(function(e){
				var target = e.target;

				if(target.nodeName == 'LI'){
					var siblings = target.parentNode.childNodes;
					for(var i=0; i<siblings.length; i++){
						var child = siblings[i];
						if(child.nodeName == 'LI'){
							child.className = '';
						}
					}

					target.className = 'active';

					var guideEl = $('.guide');
					guideEl.addClass('guide-animation');
					setTimeout(function(){
						guideEl.removeClass('guide-animation');
					},350);

					var idx = that.defaults.step = target.getAttribute('data-idx'),
						$preEl = that.$el.find('.previous'),
						$nextEl = $preEl.siblings('.next'),
						$doneEl = $preEl.siblings('.done'),
						$content = that.$el.find('.content');

					$content[0].style.background = 'url(resource/images/step'+idx+'.png)';

					$preEl[idx > 0 ? 'show':'hide']();
					$nextEl[idx < 1 ? 'show':'hide']();
					$doneEl[idx == 1 ? 'show':'hide']();
				}

				if(target.className.indexOf('close') != '-1'){
					that.$el.remove();
				}
				
				if(target.className.indexOf('previous') != '-1'){
					that.$el.find('li:eq('+ (--that.defaults.step) +')').trigger('click');
				}

				if(target.className.indexOf('next') != '-1'){
					that.$el.find('li:eq('+ (++that.defaults.step) +')').trigger('click');
				}

				if(target.className.indexOf('done') != '-1'){
					that.$el.remove();
				}

				e.stopPropagation();
			});

			// this.$el.iDrag();
		},

		unEvtBind: function(){

		}
	};

	!(function(){
		var old = $.iGuide;
		$.iGuide = function(){
			return new iGuide();
		};
		$.iGuide.defaults = {};
		$.iGuide.noConfict = function(){
			$.iGuide = old;
			return this;
		}
	})();
})();

!(function($){
	function iCard(){
		this.create();
	}

	iCard.prototype = {
		$el: '',

		tmpl: '',

		constructor: iCard,

		isOutBounds:true,

		create: function(){
			if(this.constructor.prototype.tmpl){
				this.render();
			}else{
				var that = this;
				$.ajax({
					url: 'resource/tmpl/card.html',
					success: function(data){
						window['cardJsonp'] = function(json){
							for(var prop in json){
								data = data.replace('${'+ prop +'}', json[prop]);
							}
							that.constructor.prototype.tmpl = data;

							that.render();
						}
						$.getScript('resource/mock/source/card.js');
					}
				});
			}
		},

		render: function(){
			this.$el = $(this.constructor.prototype.tmpl);
			this.evtBind();
			this.$el.appendTo($('body'));
		},

		evtBind: function(){
			this.idx = 0;
			this.round = 0;
			this.cls = ['.contact', '.introduce', '.support'];
			this.degs = [0, -20, -40];

			this.fnAnimationEvt = this.animationEvt(),
			this.fnClickEvt = this.clickEvt(),
			this.fnMouseoverEvt = this.mouseoverEvt(),
			this.fnMouseoutEvt = this.mouseoutEvt();

			var that = this;
			this.$el.click(this.fnAnimationEvt);
		},

		animationEvt: function(){
			var that = this;
			return function(e){
				that.$el.addClass('card-leftIn')
					.find('.introduce').addClass('introduce-leftIn')
						.next('.support').addClass('support-leftIn');
				setTimeout(function(){
					that.$el.css('right', 'calc(50% - 126px)').css('transform', 'rotateZ(0deg)')
						.find('.introduce').css('transform', 'rotateZ(-20deg)')
							.next('.support').css('transform', 'rotateZ(-40deg)');

					that.$el.off('click', that.fnAnimationEvt).click(that.fnClickEvt).mouseover(that.fnMouseoverEvt).mouseout(that.fnMouseoutEvt);
				
					$(document).click(function(){
						that.$el.removeClass('card-leftIn')
							.find('.introduce').removeClass('introduce-leftIn')
								.next('.support').removeClass('support-leftIn');

						that.$el.css('right', '-50px').css('transform', 'rotateZ(-50deg)')
							.find('.introduce').css('transform', 'rotateZ(-5deg)')
								.next('.support').css('transform', 'rotateZ(-10deg)');

						that.$el.off('click', that.fnClickEvt)
							.off('mouseover',that.fnMouseoverEvt)
								.off('mouseout',that.fnMouseoutEvt)
									.click(that.fnAnimationEvt);

						that.idx = 0;
						that.round = 0;
					});
				}, 1000);

				e.stopPropagation();
			}
		},

		clickEvt: function(){
			var that = this;
			return function(e){
				var target = $(e.currentTarget),
					deg = 140 + that.degs[that.idx % 3];
				
				that.degs[that.idx % 3] = deg;

				target.find(that.cls[that.idx % 3]).css('transform', 'rotateZ('+ deg +'deg)');

				++that.idx;
				if(that.idx % 3 == 0){
					++that.round;
					that.idx = 0;
					that.cls.forEach(function(item, index){
						deg = 220 + that.degs[index];

						that.degs[index] = deg;

						target.find(item).css('transform', 'rotateZ('+ deg +'deg)');
					});
				}
				e.stopPropagation();
			}
		},

		mouseoverEvt: function(){
			var that = this;
			return function(e){
				var target = $(e.currentTarget);
				that.cls.forEach(function(item, index){
					if(index){
						target.find(item).css('transform', 'rotateZ('+ (that.degs[index] + 10 * index) +'deg)');
					}
				});
				e.stopPropagation();
			}
		},

		mouseoutEvt: function(){
			var that = this;
			return function(e){
				var target = $(e.currentTarget);
				that.cls.forEach(function(item, index){
					if(index){
						target.find(item).css('transform', 'rotateZ('+ that.degs[index] +'deg)');
					}
				});
				e.stopPropagation();
			}
		},

		open: function(){

		},

		close: function(){
			this.$el.remove();
		}
	};

	!(function(){
		var old = $.iCard;
		$.iCard = function(){
			return new iCard();
		};
		$.iCard.constructor = iCard;
		$.iCard.defaults = {};
		$.iCard.noConfict = function(){
			$.iCard = old;
			return this;
		}
	})();
})(jQuery);

// @koala-prepend "source/rotate.js";
// @koala-prepend "source/dialog.js";
// @koala-prepend "source/drag.js";
// @koala-prepend "source/guide.js";
// @koala-prepend "source/card.js";